Git:

官网安装git并配置：
git --version                                              # 得到版本号即安装成功

git config --global user.name "Your Name"
git config --global user.email "email@example.com"         # 同GitHub

git config --list                                          # 检查配置

pycharm中设置->版本控制->git测试->显示版本

Alt + F12启动项目内终端



1. 克隆远程仓库（下载代码）

打开 PyCharm → 左上角克隆仓库
选择 Git，输入仓库地址（GitHub/Gitee）                          # 用SSH最佳
选择本地保存路径，最好提前设置一个项目文件夹接收 → Clone
成功后 PyCharm 会自动打开项目



2.在项目目录创建本地git仓库

打开当前项目的终端Alt + F12
输入：git init                                               # 在当前项目目录下创建一个空的 Git 仓库

检测方法：
# A. 是否在一个工作区？
git rev-parse --is-inside-work-tree
# 输出 true 表示这是一个 Git 工作副本；报错就不是。
# B. 这个仓库的根目录在哪？
git rev-parse --show-toplevel
# 会打印仓库“根”的绝对路径（.git 正常就放在这个根下面）。
# C. 仓库状态（也能顺便看当前分支）
git status
# 正常会看到 "On branch main" 之类；若提示 "not a git repository" 就还没初始化。



3.提交项目
修改文件后，右下角会显示文件变动（绿色/蓝色标记）。
绿色标记：一般表示新添加的未被 Git 追踪的文件。新创建的，未通过 git add 命令添加到 Git 的暂存区，Git目前还没有开始对它们进行版本跟踪。
蓝色标记：通常代表已经被 Git 追踪，但有修改且未添加到暂存区的文件。
git commit只负责提交 " 已经被git add到暂存区 " 的内容，与提交时工作区的最新状态无关。
如果想提交第二次修改，需要再次执行git add将新改动加入暂存区，再执行git commit。

git指令提交：

git add .
# 把当前项目目录下的所有文件添加到 Git 的 “暂存区”（可理解为待提交的准备区域）

git add file1.py file2.txt README.md
git commit -m "提交指定的几个文件，说明提交的具体原因"
# 提交多个文件到暂缓区，并写明本次提交的说明信息

git commit -m "xxx"
# 对暂存区的文件执行提交操作，-m 后面的 "xxx" 是本次提交的说明信息，用于记录这次提交的目的，
方便之后查看提交历史时能快速理解当时的代码变更情况。这一步会把文件当前的状态，永久保存到 Git 仓库的历史记录里。


pycharm图形化界面提交：
Ctrl + K（或者菜单栏 Git → Commit）。
写提交信息，比如：feat: 初始化项目。
选中要提交的文件 → Commit（仅提交到本地仓库） 或 Commit and Push（直接推到远程）



4. 推送到远程仓库
# 查看当前项目中设置的远程仓库：（如果输出为空，说明没有设置远程仓库。）
git remote -v

# 清除旧的远程仓库链接：
git remote remove origin

# 添加新远程仓库：
git remote add origin https://github.com/你的用户名/新仓库名.git

# 第一次推送所有代码：
git push -u origin main

# 推送最新修改
git push origin master

如果是第一次推送：
Git → Manage Remotes → 添加远程仓库地址（GitHub/Gitee 的 HTTPS/SSH 地址）。
然后 Ctrl + Shift + K（Push）
推送成功后，GitHub/Gitee 上就能看到代码了。
git remote add origin <远程仓库地址>
git push -u origin main



5. 拉取更新
Ctrl + T

6.配置git全局忽略文件

# 创建全局忽略文件
Git Bash中：
touch 路径/global_gitignore
git config --global core.excludesfile ~/.gitignore_global
git config --global core.excludesfile
# 配置全局忽略文件，填入路径
# 告诉gitbash全局文件是哪个
# 检查配置是否成功
在文件中写入要忽略的文件

# 单独项目的忽略文件配置
在项目根目录创建.gitignore文件
写入需要忽略的文件即可


7.版本控制
# 掌握工作区的状态:
git status
# 查看文件修改的不同：
git diff 文件名
# 操作暂存区，取消暂存（文件回到工作区，将不小心上传到暂存区的文件收回到工作区但修改保留）
git restore --staged 文件名
# 操作工作区，丢弃修改（add过：文件恢复到暂存区状态，没add过：最近commit到仓库的状态）
git restore 文件名
# 在工作区和暂存区中删除文件
git rm 文件名
git commit -m "remove 文件名"
# 用版本库里的版本替换工作区的版本（误删时用）
git checkout -- 文件名


8. 配置别名
# 以后st就表示status
git config --global alias.st status
# co表示checkout
git config --global alias.co checkout
# ci表示commit
git config --global alias.ci commit
# unstage代替reset HEAD
git config --global alias.unstage 'reset HEAD'
# 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：直接删掉配置文件错误的那一行修改别名设置
cat .gitconfig


其他：
# 把 Git 已经跟踪的、但应该被忽略的文件移出索引：
git rm -r --cached .
# 查看当前的分支：
git branch
# 修改分支名字 master -> main
git branch -m master main
# 推送到远程时，把默认分支设为 main
git push -u origin main
# 显示从最近到最远的提交日志(在其后面添加 --pretty=oneline，可让日志更加简单显示,按q退出）
git log

# 版本回退功能
# 分支管理功能
# 标签管理功能
# SourceTree图形界面工具









