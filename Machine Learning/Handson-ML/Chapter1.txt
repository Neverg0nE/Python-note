机器学习的类型：

一、按学习方式（数据标注情况）分类：

监督学习（Supervised Learning）
    数据特点：有输入（特征）和输出（标签）。
    任务：学会从输入到输出的映射关系。
    常见应用：回归（预测房价）、分类（垃圾邮件识别）。
    常用算法：k近邻算法、线性回归、逻辑回归、决策树和随机森林、支持向量机（SVM）、神经网络等。

无监督学习（Unsupervised Learning）
    数据特点：只有输入，没有标签。
    任务：从数据中发现潜在结构或规律。
    常见应用：聚类（用户分群）、降维（PCA、t-SNE）。
    常用算法：K-means（k均值）、层次聚类（HCA）、主成分分析（PCA）、AutoEncoder 等。
    1. 聚类（Clustering）
        定义：把样本自动分成若干组（簇），同一簇内样本相似度高，不同簇之间相似度低。
        应用：客户分群、图像分割、文档分类。
        常见算法：K-Means、层次聚类、DBSCAN。
    2. 降维（Dimensionality Reduction，如 PCA）
        定义：把高维数据映射到低维空间，同时尽量保留重要信息。
        作用：去除冗余特征、减少噪声。降低计算成本、便于可视化。
        常见方法：
        PCA（主成分分析）：保留方差最大的方向。
        t-SNE、UMAP：常用于可视化。
    3. 异常检测（Anomaly Detection）
        定义：识别与大多数数据模式不同的样本。
        应用：信用卡欺诈检测、工业设备故障检测、入侵检测。
        常见方法：
        基于统计（如高斯分布）。
        基于距离（如 kNN）。
        基于模型（如 Isolation Forest、One-Class SVM）。
    4. 关联规则学习（Association Rule Learning）
        定义：发现不同特征或事件之间的关联模式。
        典型例子：购物篮分析（买啤酒的人也常买尿布）。
        应用：推荐系统、交叉销售。
        常见算法：Apriori、FP-Growth。

半监督学习（Semi-supervised Learning）
    数据特点：一小部分有标签，大部分无标签。
    任务：利用少量标注和大量未标注数据来提高学习效果。
    常见应用：医疗诊断（标注成本高）、网络安全。

强化学习（Reinforcement Learning, RL）
    数据特点：通过与环境交互获得反馈（奖励或惩罚）。
    任务：找到最优策略以最大化累积奖励。
    常见应用：AlphaGo 下棋、自动驾驶、机器人控制。
    常用方法：Q-learning、Deep Q-Network (DQN)、策略梯度 (Policy Gradient)。

自监督学习（Self-supervised Learning）
    数据特点：从数据本身自动生成监督信号。不用人工标注，用数据自己制造监督信号来学习表征，再把学到的表征迁移到下游任务（分类、检索、分割、回归等）。
    任务：通过预测部分数据（如缺失内容）来学习特征表示。
    常见应用：NLP（BERT、GPT）、CV（SimCLR、MoCo）。


二、按数据处理方式：

批量学习（Batch Learning）
    特点：一次性把所有训练数据拿来训练模型。
    适合：数据量相对固定的场景。
    优点：训练过程高效（一次性处理），通常泛化能力较好。
    缺点：当新数据不断到来时，需要重新训练整个模型。
    例子：大多数传统机器学习（如 scikit-learn 的线性回归、SVM）。

在线学习（Online Learning）
    特点：数据以流的形式到来，模型逐步更新。
    适合：数据规模很大或动态变化（流式数据）。
    优点：可以快速适应新数据，节省内存。
    缺点：容易受到噪声干扰，需要设置合适的学习率。
    例子：在线广告推荐、股票行情预测。


三、按学习策略：

基于实例学习（Instance-based Learning）
    思路：记住训练数据，当有新样本时直接用相似度来预测。
    特点：没有显式的“模型参数”，而是依赖“邻居”的标签。
    优点：简单直观，适合非线性复杂分布。
    缺点：计算预测时需要大量存储和计算，泛化能力有限。
    代表算法：K 最近邻（KNN）。

基于模型学习（Model-based Learning）
    思路：根据训练数据拟合一个参数化模型，再用这个模型预测新样本。
    特点：训练阶段比较耗时，但预测时速度快。
    优点：模型具有概括能力（不需要记住所有数据）。
    缺点：模型选择和假设可能限制性能（比如线性模型无法拟合复杂关系）。
    代表算法：线性回归、逻辑回归、神经网络、SVM。


正则化：
    防止机器学习模型过拟的的方法。
    过拟合：模型在训练集表现很好，但在测试集表现差。
    正则化：在损失函数中加入额外的约束，让模型更“简单”，泛化能力更强。
超参数：
    在机器学习中，有两类参数：
    模型参数（parameters）：模型通过训练学到的（比如线性回归的权重，神经网络的权重和偏置）。
    超参数（hyperparameters）：在训练开始前就要设定，训练中不更新，不会直接通过训练学到，但会影响训练过程和结果。


章后习题：
1. 如何定义机器学习？
    定义：如果一个计算机程序在某类任务 T 上的表现 P（通常用某个度量指标表示）随着经验 E 的增加而自动改进，那么我们称这个程序在从经验 E 中学习。
2. 机器学习可以解决的四类问题？
    监督学习（有标签：分类、回归）
    无监督学习（无标签：聚类、降维）
    半监督学习（少量有标签+大量无标签）
    强化学习（通过与环境交互获得奖励/惩罚）。
3. 什么是带标签的训练集？
    训练集中每个样本除了输入特征外，还带有期望的输出（标签）。模型用它来学习输入→输出的映射。
4. 最常见的两个监督任务是什么？
    回归（预测连续值）
    分类（预测离散类别）
5. 四个常见的非监督任务？
    聚类（Clustering）
    降维（Dimensionality Reduction，如 PCA）
    异常检测（Anomaly Detection）
    关联规则学习（Association Rule Learning，例如购物篮分析）
6. 要让一个机器人能在各种未知地形行走，你会采用什么机器学习算法？
    强化学习（Reinforcement Learning），因为需要通过试错与环境交互来学习策略。
7. 要对你的顾客进行分组，你会采用哪类算法？
    无监督学习中的聚类算法（如 K-means、层次聚类）。
8. 垃圾邮件检测是监督学习问题，还是非监督学习问题？
    监督学习（输入：邮件内容，输出：是否垃圾邮件）。
9. 什么是在线学习系统？
    在线学习：模型逐步接收数据流，并不断更新，而不是一次性用所有数据。
    适用于大规模、实时变化的数据。
10. 什么是核外学习？
    核外学习（Out-of-core Learning）：数据太大无法一次载入内存，需要把数据分批读入并训练。
11. 什么学习算法是用相似度做预测？
    基于实例学习（Instance-based Learning），典型代表：KNN（K 近邻）。
12. 模型参数和学习算法的超参数的区别是什么？
    模型参数：训练过程中学到的（如线性回归的权重）。
    超参数：训练前设定，不通过训练直接学得（如学习率、正则化系数、树的深度）。
13. 基于模型学习的算法搜寻的是什么？最成功的策略是什么？基于模型学习如何做预测？
    搜寻的目标：使代价函数（损失函数）最小的模型参数。
    最成功的策略：梯度下降（Gradient Descent）。
    预测方式：把新样本输入模型，用学到的参数计算输出。
14. 机器学习的四个主要挑战是什么？
    训练数据不足。
    训练数据质量差（噪声、多样性不足）。
    特征不够相关/无效。
    模型过拟合或欠拟合。
15. 如果模型在训练集上表现好，但推广到新实例表现差，问题是什么？给出三个可能的解决方案。
    问题：过拟合。
    解决方案：
    增加训练数据量。
    减少模型复杂度（简单模型、正则化）。
    使用数据增强、早停、Dropout。
16. 什么是测试集，为什么要使用它？
    测试集：在模型完全训练好后，用来评估最终泛化能力的数据集。
    原因：保证评估结果客观，不被训练和调参过程污染。
17. 验证集的目的是什么？
    用来在训练过程中调节超参数，选择最优模型。
18. 如果用测试集调节超参数，会发生什么？
    测试集信息泄漏 → 导致模型对测试集过拟合 → 评估结果乐观，不真实反映泛化性能。
19. 什么是交叉验证，为什么它比验证集好？
    交叉验证（Cross Validation）：把训练集分成 k 折（fold），轮流做训练/验证，多次评估后取平均。
    优势：比单独划分验证集更稳定可靠，减少结果受数据划分偶然性的影响。











































































